// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { GoalsListData, GoalsListResponse, GoalsCreateData, GoalsCreateResponse, GoalsDestroyData, GoalsDestroyResponse, GoalsRetrieveData, GoalsRetrieveResponse, GoalsPartialUpdateData, GoalsPartialUpdateResponse, GoalsUpdateData, GoalsUpdateResponse, GroupsListData, GroupsListResponse, GroupsCreateData, GroupsCreateResponse, GroupsDestroyData, GroupsDestroyResponse, GroupsRetrieveData, GroupsRetrieveResponse, GroupsPartialUpdateData, GroupsPartialUpdateResponse, GroupsUpdateData, GroupsUpdateResponse, GroupsMembersRetrieveData, GroupsMembersRetrieveResponse, ObservationsListData, ObservationsListResponse, ObservationsCreateData, ObservationsCreateResponse, ObservationsDestroyData, ObservationsDestroyResponse, ObservationsRetrieveData, ObservationsRetrieveResponse, ObservationsPartialUpdateData, ObservationsPartialUpdateResponse, ObservationsUpdateData, ObservationsUpdateResponse, RolesListData, RolesListResponse, RolesCreateData, RolesCreateResponse, RolesDestroyData, RolesDestroyResponse, RolesRetrieveData, RolesRetrieveResponse, RolesPartialUpdateData, RolesPartialUpdateResponse, RolesUpdateData, RolesUpdateResponse, SchoolsListData, SchoolsListResponse, SchoolsCreateData, SchoolsCreateResponse, SchoolsDestroyData, SchoolsDestroyResponse, SchoolsRetrieveData, SchoolsRetrieveResponse, SchoolsPartialUpdateData, SchoolsPartialUpdateResponse, SchoolsUpdateData, SchoolsUpdateResponse, SchoolsUsersRetrieveData, SchoolsUsersRetrieveResponse, SituationsListData, SituationsListResponse, SituationsCreateData, SituationsCreateResponse, SituationsDestroyData, SituationsDestroyResponse, SituationsRetrieveData, SituationsRetrieveResponse, SituationsPartialUpdateData, SituationsPartialUpdateResponse, SituationsUpdateData, SituationsUpdateResponse, StatusListData, StatusListResponse, StatusCreateData, StatusCreateResponse, StatusDestroyData, StatusDestroyResponse, StatusRetrieveData, StatusRetrieveResponse, StatusPartialUpdateData, StatusPartialUpdateResponse, StatusUpdateData, StatusUpdateResponse, SubjectsListData, SubjectsListResponse, SubjectsCreateData, SubjectsCreateResponse, SubjectsDestroyData, SubjectsDestroyResponse, SubjectsRetrieveData, SubjectsRetrieveResponse, SubjectsPartialUpdateData, SubjectsPartialUpdateResponse, SubjectsUpdateData, SubjectsUpdateResponse, UserGroupsListData, UserGroupsListResponse, UserGroupsCreateData, UserGroupsCreateResponse, UserGroupsDestroyData, UserGroupsDestroyResponse, UserGroupsRetrieveData, UserGroupsRetrieveResponse, UserGroupsPartialUpdateData, UserGroupsPartialUpdateResponse, UserGroupsUpdateData, UserGroupsUpdateResponse, UsersListData, UsersListResponse, UsersCreateData, UsersCreateResponse, UsersDestroyData, UsersDestroyResponse, UsersRetrieveData, UsersRetrieveResponse, UsersPartialUpdateData, UsersPartialUpdateResponse, UsersUpdateData, UsersUpdateResponse, UsersGoalsRetrieveData, UsersGoalsRetrieveResponse, UsersGroupsRetrieveData, UsersGroupsRetrieveResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const goalsList = <ThrowOnError extends boolean = false>(options?: Options<GoalsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GoalsListResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/goals/',
        ...options
    });
};

export const goalsCreate = <ThrowOnError extends boolean = false>(options: Options<GoalsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GoalsCreateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/goals/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const goalsDestroy = <ThrowOnError extends boolean = false>(options: Options<GoalsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GoalsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/goals/{id}/',
        ...options
    });
};

export const goalsRetrieve = <ThrowOnError extends boolean = false>(options: Options<GoalsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GoalsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/goals/{id}/',
        ...options
    });
};

export const goalsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<GoalsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GoalsPartialUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/goals/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const goalsUpdate = <ThrowOnError extends boolean = false>(options: Options<GoalsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<GoalsUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/goals/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const groupsList = <ThrowOnError extends boolean = false>(options?: Options<GroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GroupsListResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/',
        ...options
    });
};

export const groupsCreate = <ThrowOnError extends boolean = false>(options: Options<GroupsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GroupsCreateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const groupsDestroy = <ThrowOnError extends boolean = false>(options: Options<GroupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<GroupsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{id}/',
        ...options
    });
};

export const groupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<GroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GroupsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{id}/',
        ...options
    });
};

export const groupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<GroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<GroupsPartialUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const groupsUpdate = <ThrowOnError extends boolean = false>(options: Options<GroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<GroupsUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Retrieve all members of a group
 */
export const groupsMembersRetrieve = <ThrowOnError extends boolean = false>(options: Options<GroupsMembersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GroupsMembersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/groups/{id}/members/',
        ...options
    });
};

export const observationsList = <ThrowOnError extends boolean = false>(options?: Options<ObservationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ObservationsListResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/observations/',
        ...options
    });
};

export const observationsCreate = <ThrowOnError extends boolean = false>(options?: Options<ObservationsCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ObservationsCreateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/observations/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const observationsDestroy = <ThrowOnError extends boolean = false>(options: Options<ObservationsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ObservationsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/observations/{id}/',
        ...options
    });
};

export const observationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<ObservationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ObservationsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/observations/{id}/',
        ...options
    });
};

export const observationsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<ObservationsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ObservationsPartialUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/observations/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const observationsUpdate = <ThrowOnError extends boolean = false>(options: Options<ObservationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ObservationsUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/observations/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const rolesList = <ThrowOnError extends boolean = false>(options?: Options<RolesListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RolesListResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/roles/',
        ...options
    });
};

export const rolesCreate = <ThrowOnError extends boolean = false>(options: Options<RolesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RolesCreateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/roles/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const rolesDestroy = <ThrowOnError extends boolean = false>(options: Options<RolesDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RolesDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/roles/{id}/',
        ...options
    });
};

export const rolesRetrieve = <ThrowOnError extends boolean = false>(options: Options<RolesRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RolesRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/roles/{id}/',
        ...options
    });
};

export const rolesPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<RolesPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<RolesPartialUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/roles/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const rolesUpdate = <ThrowOnError extends boolean = false>(options: Options<RolesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RolesUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/roles/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const schoolsList = <ThrowOnError extends boolean = false>(options?: Options<SchoolsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SchoolsListResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/schools/',
        ...options
    });
};

export const schoolsCreate = <ThrowOnError extends boolean = false>(options: Options<SchoolsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SchoolsCreateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/schools/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const schoolsDestroy = <ThrowOnError extends boolean = false>(options: Options<SchoolsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SchoolsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/schools/{id}/',
        ...options
    });
};

export const schoolsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SchoolsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SchoolsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/schools/{id}/',
        ...options
    });
};

export const schoolsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SchoolsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SchoolsPartialUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/schools/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const schoolsUpdate = <ThrowOnError extends boolean = false>(options: Options<SchoolsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SchoolsUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/schools/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get all users from groups belonging to this school
 */
export const schoolsUsersRetrieve = <ThrowOnError extends boolean = false>(options: Options<SchoolsUsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SchoolsUsersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/schools/{id}/users/',
        ...options
    });
};

export const situationsList = <ThrowOnError extends boolean = false>(options?: Options<SituationsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SituationsListResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/situations/',
        ...options
    });
};

export const situationsCreate = <ThrowOnError extends boolean = false>(options: Options<SituationsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SituationsCreateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/situations/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const situationsDestroy = <ThrowOnError extends boolean = false>(options: Options<SituationsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SituationsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/situations/{id}/',
        ...options
    });
};

export const situationsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SituationsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SituationsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/situations/{id}/',
        ...options
    });
};

export const situationsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SituationsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SituationsPartialUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/situations/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const situationsUpdate = <ThrowOnError extends boolean = false>(options: Options<SituationsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SituationsUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/situations/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const statusList = <ThrowOnError extends boolean = false>(options?: Options<StatusListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<StatusListResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/status/',
        ...options
    });
};

export const statusCreate = <ThrowOnError extends boolean = false>(options: Options<StatusCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StatusCreateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/status/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const statusDestroy = <ThrowOnError extends boolean = false>(options: Options<StatusDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<StatusDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/status/{id}/',
        ...options
    });
};

export const statusRetrieve = <ThrowOnError extends boolean = false>(options: Options<StatusRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StatusRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/status/{id}/',
        ...options
    });
};

export const statusPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<StatusPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<StatusPartialUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/status/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const statusUpdate = <ThrowOnError extends boolean = false>(options: Options<StatusUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<StatusUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/status/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const subjectsList = <ThrowOnError extends boolean = false>(options?: Options<SubjectsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SubjectsListResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/subjects/',
        ...options
    });
};

export const subjectsCreate = <ThrowOnError extends boolean = false>(options: Options<SubjectsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SubjectsCreateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/subjects/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const subjectsDestroy = <ThrowOnError extends boolean = false>(options: Options<SubjectsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SubjectsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/subjects/{id}/',
        ...options
    });
};

export const subjectsRetrieve = <ThrowOnError extends boolean = false>(options: Options<SubjectsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SubjectsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/subjects/{id}/',
        ...options
    });
};

export const subjectsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<SubjectsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SubjectsPartialUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/subjects/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const subjectsUpdate = <ThrowOnError extends boolean = false>(options: Options<SubjectsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SubjectsUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/subjects/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const userGroupsList = <ThrowOnError extends boolean = false>(options?: Options<UserGroupsListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGroupsListResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/user-groups/',
        ...options
    });
};

export const userGroupsCreate = <ThrowOnError extends boolean = false>(options: Options<UserGroupsCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UserGroupsCreateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/user-groups/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const userGroupsDestroy = <ThrowOnError extends boolean = false>(options: Options<UserGroupsDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UserGroupsDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/user-groups/{id}/',
        ...options
    });
};

export const userGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UserGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGroupsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/user-groups/{id}/',
        ...options
    });
};

export const userGroupsPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UserGroupsPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UserGroupsPartialUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/user-groups/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const userGroupsUpdate = <ThrowOnError extends boolean = false>(options: Options<UserGroupsUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UserGroupsUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/user-groups/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const usersList = <ThrowOnError extends boolean = false>(options?: Options<UsersListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UsersListResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options
    });
};

export const usersCreate = <ThrowOnError extends boolean = false>(options: Options<UsersCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UsersCreateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const usersDestroy = <ThrowOnError extends boolean = false>(options: Options<UsersDestroyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UsersDestroyResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{id}/',
        ...options
    });
};

export const usersRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{id}/',
        ...options
    });
};

export const usersPartialUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersPartialUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UsersPartialUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

export const usersUpdate = <ThrowOnError extends boolean = false>(options: Options<UsersUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UsersUpdateResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{id}/',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get all goals for a student - both personal goals and group goals
 */
export const usersGoalsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersGoalsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersGoalsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{id}/goals/',
        ...options
    });
};

export const usersGroupsRetrieve = <ThrowOnError extends boolean = false>(options: Options<UsersGroupsRetrieveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UsersGroupsRetrieveResponse, unknown, ThrowOnError>({
        security: [
            {
                in: 'cookie',
                name: 'sessionid',
                type: 'apiKey'
            },
            {
                scheme: 'basic',
                type: 'http'
            }
        ],
        url: '/users/{id}/groups/',
        ...options
    });
};