// This file is auto-generated by @hey-api/openapi-ts

export type DataMaintenanceTaskReadable = {
    readonly id: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    status?: StatusEnum;
    jobName: string;
    jobParams?: unknown;
    displayName?: string | null;
    handlerName?: string | null;
    isOverwriteEnabled?: boolean;
    isCrashOnErrorEnabled?: boolean;
    startedAt?: string | null;
    failedAt?: string | null;
    finishedAt?: string | null;
    lastHeartbeatAt?: string | null;
    earliestRunAt?: string | null;
    result?: unknown;
    attempts?: number;
    createdById?: string;
    updatedById?: string;
};

export type DataMaintenanceTaskWritable = {
    maintainedAt?: string | null;
    status?: StatusEnum;
    jobName: string;
    jobParams?: unknown;
    displayName?: string | null;
    handlerName?: string | null;
    isOverwriteEnabled?: boolean;
    isCrashOnErrorEnabled?: boolean;
    startedAt?: string | null;
    failedAt?: string | null;
    finishedAt?: string | null;
    lastHeartbeatAt?: string | null;
    earliestRunAt?: string | null;
    result?: unknown;
    attempts?: number;
    createdById?: string;
    updatedById?: string;
};

export type GoalReadable = {
    readonly id: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    title?: string | null;
    description?: string | null;
    sortOrder?: number | null;
    createdById?: string;
    updatedById?: string;
    groupId?: string;
    studentId?: string;
    subjectId?: string;
    previousGoalId?: string;
    masterySchemaId?: string;
    readonly isPersonal: boolean;
};

export type GoalWritable = {
    maintainedAt?: string | null;
    title?: string | null;
    description?: string | null;
    sortOrder?: number | null;
    createdById?: string;
    updatedById?: string;
    groupId?: string;
    studentId?: string;
    subjectId?: string;
    previousGoalId?: string;
    masterySchemaId?: string;
};

export type GroupReadable = {
    readonly id: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    feideId: string;
    displayName: string;
    type: string;
    validFrom?: string | null;
    validTo?: string | null;
    createdById?: string;
    updatedById?: string;
    subjectId?: string;
    schoolId: string;
};

export type GroupWritable = {
    maintainedAt?: string | null;
    feideId: string;
    displayName: string;
    type: string;
    validFrom?: string | null;
    validTo?: string | null;
    createdById?: string;
    updatedById?: string;
    subjectId?: string;
    schoolId: string;
};

export type MasterySchemaReadable = {
    readonly id: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    title?: string;
    description?: string | null;
    config?: unknown;
    createdById?: string;
    updatedById?: string;
    schoolId?: string;
};

export type MasterySchemaWritable = {
    maintainedAt?: string | null;
    title?: string;
    description?: string | null;
    config?: unknown;
    createdById?: string;
    updatedById?: string;
    schoolId?: string;
};

export type NestedUserGroupReadable = {
    readonly id: string;
    user: UserReadable;
    group: GroupReadable;
    role: RoleReadable;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    createdById?: string;
    updatedById?: string;
};

export type NestedUserGroupWritable = {
    user: UserWritable;
    group: GroupWritable;
    role: RoleWritable;
    maintainedAt?: string | null;
    createdById?: string;
    updatedById?: string;
};

export type NestedUserSchoolReadable = {
    readonly id: string;
    user: UserReadable;
    school: SchoolReadable;
    role: RoleReadable;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    createdById?: string;
    updatedById?: string;
};

export type NestedUserSchoolWritable = {
    user: UserWritable;
    school: SchoolWritable;
    role: RoleWritable;
    maintainedAt?: string | null;
    createdById?: string;
    updatedById?: string;
};

export type ObservationReadable = {
    readonly id: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    masteryValue?: number | null;
    masteryDescription?: string | null;
    feedforward?: string | null;
    observedAt?: string | null;
    isVisibleToStudent?: boolean;
    createdById?: string;
    updatedById?: string;
    goalId: string;
    studentId: string;
    observerId?: string;
    situationId?: string;
};

export type ObservationWritable = {
    maintainedAt?: string | null;
    masteryValue?: number | null;
    masteryDescription?: string | null;
    feedforward?: string | null;
    observedAt?: string | null;
    isVisibleToStudent?: boolean;
    createdById?: string;
    updatedById?: string;
    goalId: string;
    studentId: string;
    observerId?: string;
    situationId?: string;
};

export type PatchedDataMaintenanceTaskReadable = {
    readonly id?: string;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    status?: StatusEnum;
    jobName?: string;
    jobParams?: unknown;
    displayName?: string | null;
    handlerName?: string | null;
    isOverwriteEnabled?: boolean;
    isCrashOnErrorEnabled?: boolean;
    startedAt?: string | null;
    failedAt?: string | null;
    finishedAt?: string | null;
    lastHeartbeatAt?: string | null;
    earliestRunAt?: string | null;
    result?: unknown;
    attempts?: number;
    createdById?: string;
    updatedById?: string;
};

export type PatchedDataMaintenanceTaskWritable = {
    maintainedAt?: string | null;
    status?: StatusEnum;
    jobName?: string;
    jobParams?: unknown;
    displayName?: string | null;
    handlerName?: string | null;
    isOverwriteEnabled?: boolean;
    isCrashOnErrorEnabled?: boolean;
    startedAt?: string | null;
    failedAt?: string | null;
    finishedAt?: string | null;
    lastHeartbeatAt?: string | null;
    earliestRunAt?: string | null;
    result?: unknown;
    attempts?: number;
    createdById?: string;
    updatedById?: string;
};

export type PatchedGoalReadable = {
    readonly id?: string;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    title?: string | null;
    description?: string | null;
    sortOrder?: number | null;
    createdById?: string;
    updatedById?: string;
    groupId?: string;
    studentId?: string;
    subjectId?: string;
    previousGoalId?: string;
    masterySchemaId?: string;
    readonly isPersonal?: boolean;
};

export type PatchedGoalWritable = {
    maintainedAt?: string | null;
    title?: string | null;
    description?: string | null;
    sortOrder?: number | null;
    createdById?: string;
    updatedById?: string;
    groupId?: string;
    studentId?: string;
    subjectId?: string;
    previousGoalId?: string;
    masterySchemaId?: string;
};

export type PatchedGroupReadable = {
    readonly id?: string;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    feideId?: string;
    displayName?: string;
    type?: string;
    validFrom?: string | null;
    validTo?: string | null;
    createdById?: string;
    updatedById?: string;
    subjectId?: string;
    schoolId?: string;
};

export type PatchedGroupWritable = {
    maintainedAt?: string | null;
    feideId?: string;
    displayName?: string;
    type?: string;
    validFrom?: string | null;
    validTo?: string | null;
    createdById?: string;
    updatedById?: string;
    subjectId?: string;
    schoolId?: string;
};

export type PatchedMasterySchemaReadable = {
    readonly id?: string;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    title?: string;
    description?: string | null;
    config?: unknown;
    createdById?: string;
    updatedById?: string;
    schoolId?: string;
};

export type PatchedMasterySchemaWritable = {
    maintainedAt?: string | null;
    title?: string;
    description?: string | null;
    config?: unknown;
    createdById?: string;
    updatedById?: string;
    schoolId?: string;
};

export type PatchedNestedUserGroupReadable = {
    readonly id?: string;
    user?: UserReadable;
    group?: GroupReadable;
    role?: RoleReadable;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    createdById?: string;
    updatedById?: string;
};

export type PatchedNestedUserGroupWritable = {
    user?: UserWritable;
    group?: GroupWritable;
    role?: RoleWritable;
    maintainedAt?: string | null;
    createdById?: string;
    updatedById?: string;
};

export type PatchedObservationReadable = {
    readonly id?: string;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    masteryValue?: number | null;
    masteryDescription?: string | null;
    feedforward?: string | null;
    observedAt?: string | null;
    isVisibleToStudent?: boolean;
    createdById?: string;
    updatedById?: string;
    goalId?: string;
    studentId?: string;
    observerId?: string;
    situationId?: string;
};

export type PatchedObservationWritable = {
    maintainedAt?: string | null;
    masteryValue?: number | null;
    masteryDescription?: string | null;
    feedforward?: string | null;
    observedAt?: string | null;
    isVisibleToStudent?: boolean;
    createdById?: string;
    updatedById?: string;
    goalId?: string;
    studentId?: string;
    observerId?: string;
    situationId?: string;
};

export type PatchedRoleReadable = {
    readonly id?: string;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    name?: string;
    createdById?: string;
    updatedById?: string;
};

export type PatchedRoleWritable = {
    maintainedAt?: string | null;
    name?: string;
    createdById?: string;
    updatedById?: string;
};

export type PatchedSchoolReadable = {
    readonly id?: string;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    feideId?: string;
    displayName?: string;
    shortName?: string | null;
    orgNumber?: string;
    owner?: string | null;
    isServiceEnabled?: boolean;
    createdById?: string;
    updatedById?: string;
};

export type PatchedSchoolWritable = {
    maintainedAt?: string | null;
    feideId?: string;
    displayName?: string;
    shortName?: string | null;
    orgNumber?: string;
    owner?: string | null;
    isServiceEnabled?: boolean;
    createdById?: string;
    updatedById?: string;
};

export type PatchedSituationReadable = {
    readonly id?: string;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    title?: string;
    description?: string | null;
    happensAt?: string | null;
    createdById?: string;
    updatedById?: string;
};

export type PatchedSituationWritable = {
    maintainedAt?: string | null;
    title?: string;
    description?: string | null;
    happensAt?: string | null;
    createdById?: string;
    updatedById?: string;
};

export type PatchedStatusReadable = {
    readonly id?: string;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    estimatedAt?: string | null;
    masteryValue?: number | null;
    masteryDescription?: string | null;
    feedforward?: string | null;
    createdById?: string;
    updatedById?: string;
    studentId?: string;
    subjectId?: string;
};

export type PatchedStatusWritable = {
    maintainedAt?: string | null;
    estimatedAt?: string | null;
    masteryValue?: number | null;
    masteryDescription?: string | null;
    feedforward?: string | null;
    createdById?: string;
    updatedById?: string;
    studentId?: string;
    subjectId?: string;
};

export type PatchedSubjectReadable = {
    readonly id?: string;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    displayName?: string;
    shortName?: string;
    grepCode?: string | null;
    grepGroupCode?: string | null;
    createdById?: string;
    updatedById?: string;
    ownedBySchoolId?: string;
};

export type PatchedSubjectWritable = {
    maintainedAt?: string | null;
    displayName?: string;
    shortName?: string;
    grepCode?: string | null;
    grepGroupCode?: string | null;
    createdById?: string;
    updatedById?: string;
    ownedBySchoolId?: string;
};

export type PatchedUserReadable = {
    readonly id?: string;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    name?: string;
    feideId?: string;
    email?: string;
    lastActivityAt?: string | null;
    disabledAt?: string | null;
    isSuperadmin?: boolean;
    readonly groups?: Array<string | null>;
    readonly schools?: Array<string>;
    createdById?: string;
    updatedById?: string;
};

export type PatchedUserWritable = {
    maintainedAt?: string | null;
    name?: string;
    feideId?: string;
    email?: string;
    lastActivityAt?: string | null;
    disabledAt?: string | null;
    isSuperadmin?: boolean;
    createdById?: string;
    updatedById?: string;
};

export type PatchedUserSchoolReadable = {
    readonly id?: string;
    readonly createdAt?: string;
    readonly updatedAt?: string;
    maintainedAt?: string | null;
    createdById?: string;
    updatedById?: string;
    userId?: string;
    schoolId?: string;
    roleId?: string;
};

export type PatchedUserSchoolWritable = {
    maintainedAt?: string | null;
    createdById?: string;
    updatedById?: string;
    userId?: string;
    schoolId?: string;
    roleId?: string;
};

export type RoleReadable = {
    readonly id: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    name: string;
    createdById?: string;
    updatedById?: string;
};

export type RoleWritable = {
    maintainedAt?: string | null;
    name: string;
    createdById?: string;
    updatedById?: string;
};

export type SchoolReadable = {
    readonly id: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    feideId: string;
    displayName: string;
    shortName?: string | null;
    orgNumber: string;
    owner?: string | null;
    isServiceEnabled?: boolean;
    createdById?: string;
    updatedById?: string;
};

export type SchoolWritable = {
    maintainedAt?: string | null;
    feideId: string;
    displayName: string;
    shortName?: string | null;
    orgNumber: string;
    owner?: string | null;
    isServiceEnabled?: boolean;
    createdById?: string;
    updatedById?: string;
};

export type SituationReadable = {
    readonly id: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    title: string;
    description?: string | null;
    happensAt?: string | null;
    createdById?: string;
    updatedById?: string;
};

export type SituationWritable = {
    maintainedAt?: string | null;
    title: string;
    description?: string | null;
    happensAt?: string | null;
    createdById?: string;
    updatedById?: string;
};

export type StatusReadable = {
    readonly id: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    estimatedAt?: string | null;
    masteryValue?: number | null;
    masteryDescription?: string | null;
    feedforward?: string | null;
    createdById?: string;
    updatedById?: string;
    studentId: string;
    subjectId: string;
};

export type StatusWritable = {
    maintainedAt?: string | null;
    estimatedAt?: string | null;
    masteryValue?: number | null;
    masteryDescription?: string | null;
    feedforward?: string | null;
    createdById?: string;
    updatedById?: string;
    studentId: string;
    subjectId: string;
};

/**
 * * `pending` - Pending
 * * `running` - Running
 * * `finished` - Finished
 * * `failed` - Failed
 */
export type StatusEnum = 'pending' | 'running' | 'finished' | 'failed';

export type SubjectReadable = {
    readonly id: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    displayName: string;
    shortName: string;
    grepCode?: string | null;
    grepGroupCode?: string | null;
    createdById?: string;
    updatedById?: string;
    ownedBySchoolId?: string;
};

export type SubjectWritable = {
    maintainedAt?: string | null;
    displayName: string;
    shortName: string;
    grepCode?: string | null;
    grepGroupCode?: string | null;
    createdById?: string;
    updatedById?: string;
    ownedBySchoolId?: string;
};

export type UserReadable = {
    readonly id: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    name: string;
    feideId: string;
    email: string;
    lastActivityAt?: string | null;
    disabledAt?: string | null;
    isSuperadmin?: boolean;
    readonly groups: Array<string | null>;
    readonly schools: Array<string>;
    createdById?: string;
    updatedById?: string;
};

export type UserWritable = {
    maintainedAt?: string | null;
    name: string;
    feideId: string;
    email: string;
    lastActivityAt?: string | null;
    disabledAt?: string | null;
    isSuperadmin?: boolean;
    createdById?: string;
    updatedById?: string;
};

export type UserSchoolReadable = {
    readonly id: string;
    readonly createdAt: string;
    readonly updatedAt: string;
    maintainedAt?: string | null;
    createdById?: string;
    updatedById?: string;
    userId: string;
    schoolId: string;
    roleId: string;
};

export type UserSchoolWritable = {
    maintainedAt?: string | null;
    createdById?: string;
    updatedById?: string;
    userId: string;
    schoolId: string;
    roleId: string;
};

export type DataMaintenanceTasksListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter tasks by status
         */
        status?: string;
    };
    url: '/api/data-maintenance-tasks/';
};

export type DataMaintenanceTasksListResponses = {
    200: Array<DataMaintenanceTaskReadable>;
};

export type DataMaintenanceTasksListResponse = DataMaintenanceTasksListResponses[keyof DataMaintenanceTasksListResponses];

export type DataMaintenanceTasksCreateData = {
    body: DataMaintenanceTaskWritable;
    path?: never;
    query?: never;
    url: '/api/data-maintenance-tasks/';
};

export type DataMaintenanceTasksCreateResponses = {
    201: DataMaintenanceTaskReadable;
};

export type DataMaintenanceTasksCreateResponse = DataMaintenanceTasksCreateResponses[keyof DataMaintenanceTasksCreateResponses];

export type DataMaintenanceTasksDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this data maintenance task.
         */
        id: string;
    };
    query?: never;
    url: '/api/data-maintenance-tasks/{id}/';
};

export type DataMaintenanceTasksDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type DataMaintenanceTasksDestroyResponse = DataMaintenanceTasksDestroyResponses[keyof DataMaintenanceTasksDestroyResponses];

export type DataMaintenanceTasksRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this data maintenance task.
         */
        id: string;
    };
    query?: never;
    url: '/api/data-maintenance-tasks/{id}/';
};

export type DataMaintenanceTasksRetrieveResponses = {
    200: DataMaintenanceTaskReadable;
};

export type DataMaintenanceTasksRetrieveResponse = DataMaintenanceTasksRetrieveResponses[keyof DataMaintenanceTasksRetrieveResponses];

export type DataMaintenanceTasksPartialUpdateData = {
    body?: PatchedDataMaintenanceTaskWritable;
    path: {
        /**
         * A unique value identifying this data maintenance task.
         */
        id: string;
    };
    query?: never;
    url: '/api/data-maintenance-tasks/{id}/';
};

export type DataMaintenanceTasksPartialUpdateResponses = {
    200: DataMaintenanceTaskReadable;
};

export type DataMaintenanceTasksPartialUpdateResponse = DataMaintenanceTasksPartialUpdateResponses[keyof DataMaintenanceTasksPartialUpdateResponses];

export type DataMaintenanceTasksUpdateData = {
    body: DataMaintenanceTaskWritable;
    path: {
        /**
         * A unique value identifying this data maintenance task.
         */
        id: string;
    };
    query?: never;
    url: '/api/data-maintenance-tasks/{id}/';
};

export type DataMaintenanceTasksUpdateResponses = {
    200: DataMaintenanceTaskReadable;
};

export type DataMaintenanceTasksUpdateResponse = DataMaintenanceTasksUpdateResponses[keyof DataMaintenanceTasksUpdateResponses];

export type FetchGroupsForSchoolData = {
    body?: never;
    path: {
        /**
         * Organization number of the school
         */
        orgNumber: string;
    };
    query?: never;
    url: '/api/fetch/groups/feide/{org_number}/';
};

export type FetchGroupsForSchoolResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type FetchMembershipsForSchoolData = {
    body?: never;
    path: {
        /**
         * Organization number of the school
         */
        orgNumber: string;
    };
    query?: never;
    url: '/api/fetch/memberships/feide/{org_number}/';
};

export type FetchMembershipsForSchoolResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type FetchSchoolImportStatusData = {
    body?: never;
    path: {
        /**
         * Organization number of the school
         */
        orgNumber: string;
    };
    query?: never;
    url: '/api/fetch/school_import_status/{org_number}/';
};

export type FetchSchoolImportStatusResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type GoalsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter goals by group
         */
        group?: string;
        /**
         * Which field to use when ordering the results.
         */
        ordering?: string;
        /**
         * Filter goals by the student owning them. Using this parameter will return both personal goals and group goals where the student is a member.
         */
        student?: string;
        /**
         * Filter goals by subject
         */
        subject?: string;
    };
    url: '/api/goals/';
};

export type GoalsListResponses = {
    200: Array<GoalReadable>;
};

export type GoalsListResponse = GoalsListResponses[keyof GoalsListResponses];

export type GoalsCreateData = {
    body?: GoalWritable;
    path?: never;
    query?: never;
    url: '/api/goals/';
};

export type GoalsCreateResponses = {
    201: GoalReadable;
};

export type GoalsCreateResponse = GoalsCreateResponses[keyof GoalsCreateResponses];

export type GoalsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this goal.
         */
        id: string;
    };
    query?: never;
    url: '/api/goals/{id}/';
};

export type GoalsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type GoalsDestroyResponse = GoalsDestroyResponses[keyof GoalsDestroyResponses];

export type GoalsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this goal.
         */
        id: string;
    };
    query?: never;
    url: '/api/goals/{id}/';
};

export type GoalsRetrieveResponses = {
    200: GoalReadable;
};

export type GoalsRetrieveResponse = GoalsRetrieveResponses[keyof GoalsRetrieveResponses];

export type GoalsPartialUpdateData = {
    body?: PatchedGoalWritable;
    path: {
        /**
         * A unique value identifying this goal.
         */
        id: string;
    };
    query?: never;
    url: '/api/goals/{id}/';
};

export type GoalsPartialUpdateResponses = {
    200: GoalReadable;
};

export type GoalsPartialUpdateResponse = GoalsPartialUpdateResponses[keyof GoalsPartialUpdateResponses];

export type GoalsUpdateData = {
    body?: GoalWritable;
    path: {
        /**
         * A unique value identifying this goal.
         */
        id: string;
    };
    query?: never;
    url: '/api/goals/{id}/';
};

export type GoalsUpdateResponses = {
    200: GoalReadable;
};

export type GoalsUpdateResponse = GoalsUpdateResponses[keyof GoalsUpdateResponses];

export type GroupsListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Filter by ids (comma-separated list of group ids, e.g., xyx,123)
         */
        ids?: string;
        /**
         * Filter groups by roles a user has in that group (comma-separated list of role names, e.g., student,teacher)
         */
        roles?: string;
        /**
         * Filter users by School ID (users in any group of that school)
         */
        school: string;
        /**
         * Filter groups by type (e.g., teaching, basis)
         */
        type?: string;
        /**
         * Filter groups by user ID (groups where the user is a member)
         */
        user?: string;
    };
    url: '/api/groups/';
};

export type GroupsListResponses = {
    200: Array<GroupReadable>;
};

export type GroupsListResponse = GroupsListResponses[keyof GroupsListResponses];

export type GroupsCreateData = {
    body: GroupWritable;
    path?: never;
    query?: never;
    url: '/api/groups/';
};

export type GroupsCreateResponses = {
    201: GroupReadable;
};

export type GroupsCreateResponse = GroupsCreateResponses[keyof GroupsCreateResponses];

export type GroupsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this group.
         */
        id: string;
    };
    query?: never;
    url: '/api/groups/{id}/';
};

export type GroupsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type GroupsDestroyResponse = GroupsDestroyResponses[keyof GroupsDestroyResponses];

export type GroupsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this group.
         */
        id: string;
    };
    query?: never;
    url: '/api/groups/{id}/';
};

export type GroupsRetrieveResponses = {
    200: GroupReadable;
};

export type GroupsRetrieveResponse = GroupsRetrieveResponses[keyof GroupsRetrieveResponses];

export type GroupsPartialUpdateData = {
    body?: PatchedGroupWritable;
    path: {
        /**
         * A unique value identifying this group.
         */
        id: string;
    };
    query?: never;
    url: '/api/groups/{id}/';
};

export type GroupsPartialUpdateResponses = {
    200: GroupReadable;
};

export type GroupsPartialUpdateResponse = GroupsPartialUpdateResponses[keyof GroupsPartialUpdateResponses];

export type GroupsUpdateData = {
    body: GroupWritable;
    path: {
        /**
         * A unique value identifying this group.
         */
        id: string;
    };
    query?: never;
    url: '/api/groups/{id}/';
};

export type GroupsUpdateResponses = {
    200: GroupReadable;
};

export type GroupsUpdateResponse = GroupsUpdateResponses[keyof GroupsUpdateResponses];

export type FeideImportSchoolData = {
    body?: never;
    path: {
        /**
         * Import a single school by org number from Feide and create/update in our database.
         */
        orgNumber: string;
    };
    query?: never;
    url: '/api/import/school/feide/{org_number}/';
};

export type FeideImportSchoolResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type ImportGroupsAndUsersData = {
    body?: never;
    path: {
        /**
         * Organization number of the school
         */
        orgNumber: string;
    };
    query?: never;
    url: '/api/import/school_groups_and_users/{org_number}/';
};

export type ImportGroupsAndUsersResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type MasterySchemasListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter mastery schemas by School ID
         */
        school?: string;
    };
    url: '/api/mastery-schemas/';
};

export type MasterySchemasListResponses = {
    200: Array<MasterySchemaReadable>;
};

export type MasterySchemasListResponse = MasterySchemasListResponses[keyof MasterySchemasListResponses];

export type MasterySchemasCreateData = {
    body?: MasterySchemaWritable;
    path?: never;
    query?: never;
    url: '/api/mastery-schemas/';
};

export type MasterySchemasCreateResponses = {
    201: MasterySchemaReadable;
};

export type MasterySchemasCreateResponse = MasterySchemasCreateResponses[keyof MasterySchemasCreateResponses];

export type MasterySchemasDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this mastery schema.
         */
        id: string;
    };
    query?: never;
    url: '/api/mastery-schemas/{id}/';
};

export type MasterySchemasDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type MasterySchemasDestroyResponse = MasterySchemasDestroyResponses[keyof MasterySchemasDestroyResponses];

export type MasterySchemasRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this mastery schema.
         */
        id: string;
    };
    query?: never;
    url: '/api/mastery-schemas/{id}/';
};

export type MasterySchemasRetrieveResponses = {
    200: MasterySchemaReadable;
};

export type MasterySchemasRetrieveResponse = MasterySchemasRetrieveResponses[keyof MasterySchemasRetrieveResponses];

export type MasterySchemasPartialUpdateData = {
    body?: PatchedMasterySchemaWritable;
    path: {
        /**
         * A unique value identifying this mastery schema.
         */
        id: string;
    };
    query?: never;
    url: '/api/mastery-schemas/{id}/';
};

export type MasterySchemasPartialUpdateResponses = {
    200: MasterySchemaReadable;
};

export type MasterySchemasPartialUpdateResponse = MasterySchemasPartialUpdateResponses[keyof MasterySchemasPartialUpdateResponses];

export type MasterySchemasUpdateData = {
    body?: MasterySchemaWritable;
    path: {
        /**
         * A unique value identifying this mastery schema.
         */
        id: string;
    };
    query?: never;
    url: '/api/mastery-schemas/{id}/';
};

export type MasterySchemasUpdateResponses = {
    200: MasterySchemaReadable;
};

export type MasterySchemasUpdateResponse = MasterySchemasUpdateResponses[keyof MasterySchemasUpdateResponses];

export type ObservationsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter observations by goal.
         */
        goal?: string;
        /**
         * Filter observations by who has done the observing.
         */
        observer?: string;
        /**
         * Filter observations by the observed student.
         */
        student?: string;
    };
    url: '/api/observations/';
};

export type ObservationsListResponses = {
    200: Array<ObservationReadable>;
};

export type ObservationsListResponse = ObservationsListResponses[keyof ObservationsListResponses];

export type ObservationsCreateData = {
    body: ObservationWritable;
    path?: never;
    query?: never;
    url: '/api/observations/';
};

export type ObservationsCreateResponses = {
    201: ObservationReadable;
};

export type ObservationsCreateResponse = ObservationsCreateResponses[keyof ObservationsCreateResponses];

export type ObservationsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this observation.
         */
        id: string;
    };
    query?: never;
    url: '/api/observations/{id}/';
};

export type ObservationsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type ObservationsDestroyResponse = ObservationsDestroyResponses[keyof ObservationsDestroyResponses];

export type ObservationsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this observation.
         */
        id: string;
    };
    query?: never;
    url: '/api/observations/{id}/';
};

export type ObservationsRetrieveResponses = {
    200: ObservationReadable;
};

export type ObservationsRetrieveResponse = ObservationsRetrieveResponses[keyof ObservationsRetrieveResponses];

export type ObservationsPartialUpdateData = {
    body?: PatchedObservationWritable;
    path: {
        /**
         * A unique value identifying this observation.
         */
        id: string;
    };
    query?: never;
    url: '/api/observations/{id}/';
};

export type ObservationsPartialUpdateResponses = {
    200: ObservationReadable;
};

export type ObservationsPartialUpdateResponse = ObservationsPartialUpdateResponses[keyof ObservationsPartialUpdateResponses];

export type ObservationsUpdateData = {
    body: ObservationWritable;
    path: {
        /**
         * A unique value identifying this observation.
         */
        id: string;
    };
    query?: never;
    url: '/api/observations/{id}/';
};

export type ObservationsUpdateResponses = {
    200: ObservationReadable;
};

export type ObservationsUpdateResponse = ObservationsUpdateResponses[keyof ObservationsUpdateResponses];

export type PingRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/ping/';
};

export type PingRetrieveResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type RolesListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/roles/';
};

export type RolesListResponses = {
    200: Array<RoleReadable>;
};

export type RolesListResponse = RolesListResponses[keyof RolesListResponses];

export type RolesCreateData = {
    body: RoleWritable;
    path?: never;
    query?: never;
    url: '/api/roles/';
};

export type RolesCreateResponses = {
    201: RoleReadable;
};

export type RolesCreateResponse = RolesCreateResponses[keyof RolesCreateResponses];

export type RolesDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this role.
         */
        id: string;
    };
    query?: never;
    url: '/api/roles/{id}/';
};

export type RolesDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type RolesDestroyResponse = RolesDestroyResponses[keyof RolesDestroyResponses];

export type RolesRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this role.
         */
        id: string;
    };
    query?: never;
    url: '/api/roles/{id}/';
};

export type RolesRetrieveResponses = {
    200: RoleReadable;
};

export type RolesRetrieveResponse = RolesRetrieveResponses[keyof RolesRetrieveResponses];

export type RolesPartialUpdateData = {
    body?: PatchedRoleWritable;
    path: {
        /**
         * A unique value identifying this role.
         */
        id: string;
    };
    query?: never;
    url: '/api/roles/{id}/';
};

export type RolesPartialUpdateResponses = {
    200: RoleReadable;
};

export type RolesPartialUpdateResponse = RolesPartialUpdateResponses[keyof RolesPartialUpdateResponses];

export type RolesUpdateData = {
    body: RoleWritable;
    path: {
        /**
         * A unique value identifying this role.
         */
        id: string;
    };
    query?: never;
    url: '/api/roles/{id}/';
};

export type RolesUpdateResponses = {
    200: RoleReadable;
};

export type RolesUpdateResponse = RolesUpdateResponses[keyof RolesUpdateResponses];

export type SchoolsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter schools by whether the mastery service is enabled
         */
        isServiceEnabled?: boolean;
    };
    url: '/api/schools/';
};

export type SchoolsListResponses = {
    200: Array<SchoolReadable>;
};

export type SchoolsListResponse = SchoolsListResponses[keyof SchoolsListResponses];

export type SchoolsCreateData = {
    body: SchoolWritable;
    path?: never;
    query?: never;
    url: '/api/schools/';
};

export type SchoolsCreateResponses = {
    201: SchoolReadable;
};

export type SchoolsCreateResponse = SchoolsCreateResponses[keyof SchoolsCreateResponses];

export type SchoolsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this school.
         */
        id: string;
    };
    query?: never;
    url: '/api/schools/{id}/';
};

export type SchoolsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type SchoolsDestroyResponse = SchoolsDestroyResponses[keyof SchoolsDestroyResponses];

export type SchoolsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this school.
         */
        id: string;
    };
    query?: never;
    url: '/api/schools/{id}/';
};

export type SchoolsRetrieveResponses = {
    200: SchoolReadable;
};

export type SchoolsRetrieveResponse = SchoolsRetrieveResponses[keyof SchoolsRetrieveResponses];

export type SchoolsPartialUpdateData = {
    body?: PatchedSchoolWritable;
    path: {
        /**
         * A unique value identifying this school.
         */
        id: string;
    };
    query?: never;
    url: '/api/schools/{id}/';
};

export type SchoolsPartialUpdateResponses = {
    200: SchoolReadable;
};

export type SchoolsPartialUpdateResponse = SchoolsPartialUpdateResponses[keyof SchoolsPartialUpdateResponses];

export type SchoolsUpdateData = {
    body: SchoolWritable;
    path: {
        /**
         * A unique value identifying this school.
         */
        id: string;
    };
    query?: never;
    url: '/api/schools/{id}/';
};

export type SchoolsUpdateResponses = {
    200: SchoolReadable;
};

export type SchoolsUpdateResponse = SchoolsUpdateResponses[keyof SchoolsUpdateResponses];

export type SituationsListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/situations/';
};

export type SituationsListResponses = {
    200: Array<SituationReadable>;
};

export type SituationsListResponse = SituationsListResponses[keyof SituationsListResponses];

export type SituationsCreateData = {
    body: SituationWritable;
    path?: never;
    query?: never;
    url: '/api/situations/';
};

export type SituationsCreateResponses = {
    201: SituationReadable;
};

export type SituationsCreateResponse = SituationsCreateResponses[keyof SituationsCreateResponses];

export type SituationsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this situation.
         */
        id: string;
    };
    query?: never;
    url: '/api/situations/{id}/';
};

export type SituationsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type SituationsDestroyResponse = SituationsDestroyResponses[keyof SituationsDestroyResponses];

export type SituationsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this situation.
         */
        id: string;
    };
    query?: never;
    url: '/api/situations/{id}/';
};

export type SituationsRetrieveResponses = {
    200: SituationReadable;
};

export type SituationsRetrieveResponse = SituationsRetrieveResponses[keyof SituationsRetrieveResponses];

export type SituationsPartialUpdateData = {
    body?: PatchedSituationWritable;
    path: {
        /**
         * A unique value identifying this situation.
         */
        id: string;
    };
    query?: never;
    url: '/api/situations/{id}/';
};

export type SituationsPartialUpdateResponses = {
    200: SituationReadable;
};

export type SituationsPartialUpdateResponse = SituationsPartialUpdateResponses[keyof SituationsPartialUpdateResponses];

export type SituationsUpdateData = {
    body: SituationWritable;
    path: {
        /**
         * A unique value identifying this situation.
         */
        id: string;
    };
    query?: never;
    url: '/api/situations/{id}/';
};

export type SituationsUpdateResponses = {
    200: SituationReadable;
};

export type SituationsUpdateResponse = SituationsUpdateResponses[keyof SituationsUpdateResponses];

export type StatusListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/status/';
};

export type StatusListResponses = {
    200: Array<StatusReadable>;
};

export type StatusListResponse = StatusListResponses[keyof StatusListResponses];

export type StatusCreateData = {
    body: StatusWritable;
    path?: never;
    query?: never;
    url: '/api/status/';
};

export type StatusCreateResponses = {
    201: StatusReadable;
};

export type StatusCreateResponse = StatusCreateResponses[keyof StatusCreateResponses];

export type StatusDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this status.
         */
        id: string;
    };
    query?: never;
    url: '/api/status/{id}/';
};

export type StatusDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type StatusDestroyResponse = StatusDestroyResponses[keyof StatusDestroyResponses];

export type StatusRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this status.
         */
        id: string;
    };
    query?: never;
    url: '/api/status/{id}/';
};

export type StatusRetrieveResponses = {
    200: StatusReadable;
};

export type StatusRetrieveResponse = StatusRetrieveResponses[keyof StatusRetrieveResponses];

export type StatusPartialUpdateData = {
    body?: PatchedStatusWritable;
    path: {
        /**
         * A unique value identifying this status.
         */
        id: string;
    };
    query?: never;
    url: '/api/status/{id}/';
};

export type StatusPartialUpdateResponses = {
    200: StatusReadable;
};

export type StatusPartialUpdateResponse = StatusPartialUpdateResponses[keyof StatusPartialUpdateResponses];

export type StatusUpdateData = {
    body: StatusWritable;
    path: {
        /**
         * A unique value identifying this status.
         */
        id: string;
    };
    query?: never;
    url: '/api/status/{id}/';
};

export type StatusUpdateResponses = {
    200: StatusReadable;
};

export type StatusUpdateResponse = StatusUpdateResponses[keyof StatusUpdateResponses];

export type SubjectsListData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Filter subject by owned_by_school (school ID)
         */
        ownedBy?: string;
        /**
         * Filter subject by subject.groups belonging to school
         */
        school?: string;
    };
    url: '/api/subjects/';
};

export type SubjectsListResponses = {
    200: Array<SubjectReadable>;
};

export type SubjectsListResponse = SubjectsListResponses[keyof SubjectsListResponses];

export type SubjectsCreateData = {
    body: SubjectWritable;
    path?: never;
    query?: never;
    url: '/api/subjects/';
};

export type SubjectsCreateResponses = {
    201: SubjectReadable;
};

export type SubjectsCreateResponse = SubjectsCreateResponses[keyof SubjectsCreateResponses];

export type SubjectsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this subject.
         */
        id: string;
    };
    query?: never;
    url: '/api/subjects/{id}/';
};

export type SubjectsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type SubjectsDestroyResponse = SubjectsDestroyResponses[keyof SubjectsDestroyResponses];

export type SubjectsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this subject.
         */
        id: string;
    };
    query?: never;
    url: '/api/subjects/{id}/';
};

export type SubjectsRetrieveResponses = {
    200: SubjectReadable;
};

export type SubjectsRetrieveResponse = SubjectsRetrieveResponses[keyof SubjectsRetrieveResponses];

export type SubjectsPartialUpdateData = {
    body?: PatchedSubjectWritable;
    path: {
        /**
         * A unique value identifying this subject.
         */
        id: string;
    };
    query?: never;
    url: '/api/subjects/{id}/';
};

export type SubjectsPartialUpdateResponses = {
    200: SubjectReadable;
};

export type SubjectsPartialUpdateResponse = SubjectsPartialUpdateResponses[keyof SubjectsPartialUpdateResponses];

export type SubjectsUpdateData = {
    body: SubjectWritable;
    path: {
        /**
         * A unique value identifying this subject.
         */
        id: string;
    };
    query?: never;
    url: '/api/subjects/{id}/';
};

export type SubjectsUpdateResponses = {
    200: SubjectReadable;
};

export type SubjectsUpdateResponse = SubjectsUpdateResponses[keyof SubjectsUpdateResponses];

export type UserGroupsListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Group ID
         */
        group?: string;
        /**
         * Role name (e.g., student, teacher, staff, admin)
         */
        role?: string;
        /**
         * School ID
         */
        school: string;
        /**
         * User ID
         */
        user?: string;
    };
    url: '/api/user-groups/';
};

export type UserGroupsListResponses = {
    200: Array<NestedUserGroupReadable>;
};

export type UserGroupsListResponse = UserGroupsListResponses[keyof UserGroupsListResponses];

export type UserGroupsCreateData = {
    body?: NestedUserGroupWritable;
    path?: never;
    query?: never;
    url: '/api/user-groups/';
};

export type UserGroupsCreateResponses = {
    201: NestedUserGroupReadable;
};

export type UserGroupsCreateResponse = UserGroupsCreateResponses[keyof UserGroupsCreateResponses];

export type UserGroupsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this user group.
         */
        id: string;
    };
    query?: never;
    url: '/api/user-groups/{id}/';
};

export type UserGroupsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type UserGroupsDestroyResponse = UserGroupsDestroyResponses[keyof UserGroupsDestroyResponses];

export type UserGroupsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this user group.
         */
        id: string;
    };
    query?: never;
    url: '/api/user-groups/{id}/';
};

export type UserGroupsRetrieveResponses = {
    200: NestedUserGroupReadable;
};

export type UserGroupsRetrieveResponse = UserGroupsRetrieveResponses[keyof UserGroupsRetrieveResponses];

export type UserGroupsPartialUpdateData = {
    body?: PatchedNestedUserGroupWritable;
    path: {
        /**
         * A unique value identifying this user group.
         */
        id: string;
    };
    query?: never;
    url: '/api/user-groups/{id}/';
};

export type UserGroupsPartialUpdateResponses = {
    200: NestedUserGroupReadable;
};

export type UserGroupsPartialUpdateResponse = UserGroupsPartialUpdateResponses[keyof UserGroupsPartialUpdateResponses];

export type UserGroupsUpdateData = {
    body?: NestedUserGroupWritable;
    path: {
        /**
         * A unique value identifying this user group.
         */
        id: string;
    };
    query?: never;
    url: '/api/user-groups/{id}/';
};

export type UserGroupsUpdateResponses = {
    200: NestedUserGroupReadable;
};

export type UserGroupsUpdateResponse = UserGroupsUpdateResponses[keyof UserGroupsUpdateResponses];

export type UserSchoolsListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Role name (e.g., student, teacher, staff, admin)
         */
        role?: string;
        /**
         * School ID
         */
        school: string;
        /**
         * User ID
         */
        user?: string;
    };
    url: '/api/user-schools/';
};

export type UserSchoolsListResponses = {
    200: Array<NestedUserSchoolReadable>;
};

export type UserSchoolsListResponse = UserSchoolsListResponses[keyof UserSchoolsListResponses];

export type UserSchoolsCreateData = {
    body: UserSchoolWritable;
    path?: never;
    query?: never;
    url: '/api/user-schools/';
};

export type UserSchoolsCreateResponses = {
    201: UserSchoolReadable;
};

export type UserSchoolsCreateResponse = UserSchoolsCreateResponses[keyof UserSchoolsCreateResponses];

export type UserSchoolsDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this user school.
         */
        id: string;
    };
    query?: never;
    url: '/api/user-schools/{id}/';
};

export type UserSchoolsDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type UserSchoolsDestroyResponse = UserSchoolsDestroyResponses[keyof UserSchoolsDestroyResponses];

export type UserSchoolsRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this user school.
         */
        id: string;
    };
    query?: never;
    url: '/api/user-schools/{id}/';
};

export type UserSchoolsRetrieveResponses = {
    200: NestedUserSchoolReadable;
};

export type UserSchoolsRetrieveResponse = UserSchoolsRetrieveResponses[keyof UserSchoolsRetrieveResponses];

export type UserSchoolsPartialUpdateData = {
    body?: PatchedUserSchoolWritable;
    path: {
        /**
         * A unique value identifying this user school.
         */
        id: string;
    };
    query?: never;
    url: '/api/user-schools/{id}/';
};

export type UserSchoolsPartialUpdateResponses = {
    200: UserSchoolReadable;
};

export type UserSchoolsPartialUpdateResponse = UserSchoolsPartialUpdateResponses[keyof UserSchoolsPartialUpdateResponses];

export type UserSchoolsUpdateData = {
    body: UserSchoolWritable;
    path: {
        /**
         * A unique value identifying this user school.
         */
        id: string;
    };
    query?: never;
    url: '/api/user-schools/{id}/';
};

export type UserSchoolsUpdateResponses = {
    200: UserSchoolReadable;
};

export type UserSchoolsUpdateResponse = UserSchoolsUpdateResponses[keyof UserSchoolsUpdateResponses];

export type UsersListData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Filter users by group membership. Comma-separated list of group IDs
         */
        groups?: string;
        /**
         * Filter users by roles the users have. Comma-separated list of role names (e.g., student,teacher)
         */
        roles?: string;
        /**
         * Filter users by School ID (users in any group of that school)
         */
        school: string;
    };
    url: '/api/users/';
};

export type UsersListResponses = {
    200: Array<UserReadable>;
};

export type UsersListResponse = UsersListResponses[keyof UsersListResponses];

export type UsersCreateData = {
    body: UserWritable;
    path?: never;
    query?: never;
    url: '/api/users/';
};

export type UsersCreateResponses = {
    201: UserReadable;
};

export type UsersCreateResponse = UsersCreateResponses[keyof UsersCreateResponses];

export type UsersDestroyData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this user.
         */
        id: string;
    };
    query?: never;
    url: '/api/users/{id}/';
};

export type UsersDestroyResponses = {
    /**
     * No response body
     */
    204: void;
};

export type UsersDestroyResponse = UsersDestroyResponses[keyof UsersDestroyResponses];

export type UsersRetrieveData = {
    body?: never;
    path: {
        /**
         * A unique value identifying this user.
         */
        id: string;
    };
    query?: never;
    url: '/api/users/{id}/';
};

export type UsersRetrieveResponses = {
    200: UserReadable;
};

export type UsersRetrieveResponse = UsersRetrieveResponses[keyof UsersRetrieveResponses];

export type UsersPartialUpdateData = {
    body?: PatchedUserWritable;
    path: {
        /**
         * A unique value identifying this user.
         */
        id: string;
    };
    query?: never;
    url: '/api/users/{id}/';
};

export type UsersPartialUpdateResponses = {
    200: UserReadable;
};

export type UsersPartialUpdateResponse = UsersPartialUpdateResponses[keyof UsersPartialUpdateResponses];

export type UsersUpdateData = {
    body: UserWritable;
    path: {
        /**
         * A unique value identifying this user.
         */
        id: string;
    };
    query?: never;
    url: '/api/users/{id}/';
};

export type UsersUpdateResponses = {
    200: UserReadable;
};

export type UsersUpdateResponse = UsersUpdateResponses[keyof UsersUpdateResponses];

export type AuthStatusRetrieveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/status';
};

export type AuthStatusRetrieveResponses = {
    /**
     * No response body
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:5000' | (string & {});
};